name: Deploy Portfolio

on:
  push:
    branches:
      - master   # or main, depending on your repo

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the repository
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2️⃣ Set up SSH agent with private key
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3️⃣ Add server to known_hosts to avoid host key verification errors
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      # 4️⃣ Deploy via SSH
      - name: Deploy to DigitalOcean
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            set -euxo pipefail

            PROJECT_DIR=/var/www/html/portfolio
            REPO_URL=git@github.com:kayzinkhaing/portfolio-cqrs-clean-architecture.git
            BRANCH=master

            # Navigate to project folder or create if missing
            cd \$PROJECT_DIR || {
              echo 'Creating portfolio folder...'
              sudo mkdir -p \$PROJECT_DIR
              cd \$PROJECT_DIR
            }

            # Pull latest code safely
            if [ -d .git ]; then
              echo 'Pulling latest code...'
              git fetch origin \$BRANCH
              git reset --hard origin/\$BRANCH
            else
              echo 'Cloning repository...'
              git clone -b \$BRANCH \$REPO_URL .
            fi

            # Create .env files from GitHub Secrets (correct expansion)
            echo \"\${{ secrets.ENV_FILE }}\" > .env.production
            echo \"\${{ secrets.ENV_FRONTEND_FILE }}\" > .env.frontend
            sudo chown \$USER:\$USER .env.production .env.frontend

            # Stop existing Docker containers
            echo 'Stopping existing containers...'
            docker-compose -f docker-compose.yml down || true

            # Start Docker containers
            echo 'Starting containers...'
            docker-compose -f docker-compose.prod.yml up -d --build

            # Wait for Laravel to be ready
            until docker exec laravel-backend php artisan migrate:status > /dev/null 2>&1; do
              echo 'Waiting for Laravel...'
              sleep 5
            done

            # Run Laravel artisan commands (without regenerating key)
            echo 'Running Laravel commands...'
            docker exec laravel-backend php artisan migrate --force
            docker exec laravel-backend php artisan storage:link || true
            docker exec laravel-backend php artisan config:clear
            docker exec laravel-backend php artisan cache:clear
            docker exec laravel-backend php artisan route:clear
            docker exec laravel-backend php artisan view:clear

            # Reload Nginx (adjust if inside Docker)
            echo 'Reloading Nginx...'
            sudo nginx -s reload || true

            echo 'Deployment completed successfully!'
          "
