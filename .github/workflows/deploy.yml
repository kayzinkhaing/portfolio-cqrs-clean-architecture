name: Deploy Portfolio

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to DigitalOcean
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -euxo pipefail

            PROJECT_DIR=/var/www/html/portfolio
            REPO_URL=git@github.com:kayzinkhaing/portfolio-cqrs-clean-architecture.git
            BRANCH=master

            # Ensure project folder exists
            if [ ! -d "$PROJECT_DIR" ]; then
              mkdir -p "$PROJECT_DIR"
            fi

            cd "$PROJECT_DIR"

            # If it's a git repo, fetch & reset, else clone
            if [ -d .git ]; then
              echo 'Pulling latest code...'
              git fetch origin "$BRANCH"
              git reset --hard "origin/$BRANCH"
            else
              echo 'Cloning repository...'
              # Make sure folder is empty
              if [ "$(ls -A)" ]; then
                echo "Directory not empty, cleaning..."
                rm -rf ./*
              fi
              git clone "$REPO_URL" .
            fi

            # Create .env files from secrets
            echo '${{ secrets.ENV_FILE }}' > .env.production
            echo '${{ secrets.ENV_FRONTEND_FILE }}' > .env.frontend

            # Stop and start Docker containers
            docker-compose -f docker-compose.prod.yml down || true
            docker-compose -f docker-compose.prod.yml up -d --build

            # Wait for Laravel container to start
            sleep 30

            # Run Laravel commands
            docker exec laravel-backend php artisan key:generate --force
            docker exec laravel-backend php artisan migrate --force
            docker exec laravel-backend php artisan storage:link || true
            docker exec laravel-backend php artisan config:clear
            docker exec laravel-backend php artisan cache:clear
            docker exec laravel-backend php artisan route:clear
            docker exec laravel-backend php artisan view:clear

            # Reload Nginx
            sudo nginx -s reload

            echo 'Deployment completed successfully!'
          EOF
