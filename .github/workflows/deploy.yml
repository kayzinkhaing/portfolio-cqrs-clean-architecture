name: Deploy Portfolio

on:
  push:
    branches:
      - master   # Change if your main branch is different

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Setup SSH agent
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3️⃣ Add server to known_hosts
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      # 4️⃣ Deploy via SSH
      - name: Deploy to DigitalOcean
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            set -euxo pipefail

            ##############################
            # Project directories
            ##############################
            PROJECT_DIR=/var/www/html/portfolio
            LARAVEL_DIR=$PROJECT_DIR/auth-system
            FRONTEND_DIR=$PROJECT_DIR/vue-auth-system
            BRANCH=master

            # Create project folder if missing
            cd $PROJECT_DIR || { mkdir -p $PROJECT_DIR; cd $PROJECT_DIR; }

            # Pull or clone repository
            if [ -d .git ]; then
              echo "Pulling latest code..."
              git fetch origin $BRANCH
              git reset --hard origin/$BRANCH
            else
              echo "Cloning repository..."
              git clone -b $BRANCH git@github.com:kayzinkhaing/portfolio-cqrs-clean-architecture.git .
            fi

            ##############################
            # Deploy .env files safely
            ##############################
            echo "${{ secrets.ENV_FILE }}" > $LARAVEL_DIR/.env
            echo "${{ secrets.ENV_FRONTEND }}" > $FRONTEND_DIR/.env
            sudo chown $USER:$USER $LARAVEL_DIR/.env $FRONTEND_DIR/.env

            ##############################
            # Stop existing containers
            ##############################
            echo "Stopping existing containers..."
            docker compose -f docker-stack/docker-compose.yml down || true

            ##############################
            # Build & start containers
            ##############################
            echo "Starting containers..."
            docker compose -f docker-stack/docker-compose.yml up -d --build

            ##############################
            # Wait for Laravel container to be ready
            ##############################
            echo "Waiting for Laravel container..."
            until docker compose exec -T laravel php artisan migrate:status >/dev/null 2>&1; do
              echo "Laravel not ready yet, sleeping 5 seconds..."
              sleep 5
            done

            ##############################
            # Run Laravel Artisan commands
            ##############################
            echo "Running Laravel Artisan commands..."
            docker compose exec -T laravel php artisan migrate --force
            docker compose exec -T laravel php artisan storage:link || true
            docker compose exec -T laravel php artisan config:clear
            docker compose exec -T laravel php artisan cache:clear
            docker compose exec -T laravel php artisan route:clear
            docker compose exec -T laravel php artisan view:clear

            ##############################
            # Reload Nginx
            ##############################
            echo "Reloading Nginx..."
            sudo nginx -s reload || true

            echo "✅ Deployment completed successfully!"
          EOF
