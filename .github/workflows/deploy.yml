name: Deploy Portfolio

on:
  push:
    branches:
      - master   # or main, depending on your repo

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the repository
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2️⃣ Set up SSH agent with private key
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3️⃣ Add server to known_hosts to avoid host key verification error
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      # 4️⃣ Deploy via SSH
      - name: Deploy to DigitalOcean
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            set -euxo pipefail

            # Navigate to project folder or create if missing
            cd /var/www/html/portfolio || {
              echo 'Creating portfolio folder...'
              sudo mkdir -p /var/www/html/portfolio
              cd /var/www/html/portfolio
            }

            echo 'Pulling latest code...'
            if [ -d .git ]; then
              git fetch origin master
              git reset --hard origin/master
            else
              git clone git@github.com:<YOUR_GITHUB_USERNAME>/<YOUR_REPO>.git .
            fi

            # Create .env files from secrets
            echo '${{ secrets.ENV_FILE }}' > .env.production
            echo '${{ secrets.ENV_FRONTEND_FILE }}' > .env.frontend

            # Stop existing Docker containers
            echo 'Stopping existing containers...'
            docker-compose -f docker-compose.prod.yml down || true

            # Start containers
            echo 'Starting containers...'
            docker-compose -f docker-compose.prod.yml up -d --build

            # Wait for Laravel container to be ready
            echo 'Waiting for Laravel container to start...'
            sleep 30

            # Run Laravel commands
            echo 'Running Laravel commands...'
            docker exec laravel-backend php artisan key:generate --force
            docker exec laravel-backend php artisan migrate --force
            docker exec laravel-backend php artisan storage:link || true
            docker exec laravel-backend php artisan config:clear
            docker exec laravel-backend php artisan cache:clear
            docker exec laravel-backend php artisan route:clear
            docker exec laravel-backend php artisan view:clear

            # Reload Nginx
            echo 'Reloading Nginx...'
            sudo nginx -s reload

            echo 'Deployment completed successfully!'
          "
