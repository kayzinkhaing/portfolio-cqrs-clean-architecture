name: Deploy Portfolio

on:
  push:
    branches:
      - master   # or main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2️⃣ Set up SSH agent
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3️⃣ Add server to known_hosts
      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      # 4️⃣ Deploy via SSH
      - name: Deploy to DigitalOcean
        run: |
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
            set -euxo pipefail

            # Define project folders
            PROJECT_DIR=/var/www/html/portfolio
            LARAVEL_DIR=\$PROJECT_DIR/auth-system
            FRONTEND_DIR=\$PROJECT_DIR/vue-auth-system
            BRANCH=master

            # Navigate to project folder
            cd \$PROJECT_DIR || { 
              echo 'Creating project folder...'
              sudo mkdir -p \$PROJECT_DIR
              cd \$PROJECT_DIR
            }

            # Pull or clone repo
            if [ -d .git ]; then
              echo 'Pulling latest code...'
              git fetch origin \$BRANCH
              git reset --hard origin/\$BRANCH
            else
              echo 'Cloning repository...'
              git clone -b \$BRANCH git@github.com:kayzinkhaing/portfolio-cqrs-clean-architecture.git .
            fi

            # Create .env files from GitHub Secrets
            echo \"\${{ secrets.ENV_FILE }}\" > \$LARAVEL_DIR/.env
            echo \"\${{ secrets.ENV_FRONTEND_FILE }}\" > \$FRONTEND_DIR/.env
            sudo chown \$USER:\$USER \$LARAVEL_DIR/.env \$FRONTEND_DIR/.env

            # Stop existing containers
            echo 'Stopping existing containers...'
            docker compose -f docker-stack/docker-compose.yml down || true

            # Start containers
            echo 'Starting containers...'
            docker compose -f docker-stack/docker-compose.yml up -d --build

            # Wait for Laravel container to be ready
            until docker exec laravel-backend php artisan migrate:status > /dev/null 2>&1; do
              echo 'Waiting for Laravel...'
              sleep 5
            done

            # Run Laravel artisan commands
            echo 'Running Laravel commands...'
            docker exec laravel-backend php artisan migrate --force
            docker exec laravel-backend php artisan storage:link || true
            docker exec laravel-backend php artisan config:clear
            docker exec laravel-backend php artisan cache:clear
            docker exec laravel-backend php artisan route:clear
            docker exec laravel-backend php artisan view:clear

            # Reload Nginx
            echo 'Reloading Nginx...'
            sudo nginx -s reload || true

            echo 'Deployment completed successfully!'
          "
